Open-Closed Princeple:
Open Form Extension: Module should provide extension points to alter its behavior.
One way is to make use of polymorphism to invoke extended behaviors of an object at run time.

Closed Modification: This means that the source code of such a module remains unchanged.


It might initially appear that the phrases are conflicting- How can we change the behavior of a module without making changes to it?
The answer in Java is abstraction. You can create abstractions (Java interfaces and abstract classes)
that are fixed and yet represent an unbounded group of possible behaviors through concrete subclasses.

Before we write code which follows the Open Closed Principle, let’s look at the consequences of violating the Open Closed principle.

Bad Example:
Consider an insurance system that validates health insurance claims before approving one.
We can follow the complementary Single Responsibility Principle to model this requirement by creating two separate classes.
A HealthInsuranceSurveyor class responsible to validate claims and a ClaimApprovalManager class responsible to approve claims.

HealthInsuranceSurveyor.java
package guru.springframework.blog.openclosedprinciple;
public class HealthInsuranceSurveyor{
    public boolean isValidClaim(){
        System.out.println("HealthInsuranceSurveyor: Validating health insurance claim...");
        /*Logic to validate health insurance claims*/
        return true;
    }
}


ClaimApprovalManager.java
package guru.springframework.blog.openclosedprinciple;
public class ClaimApprovalManager {
    public void processHealthClaim (HealthInsuranceSurveyor surveyor)    {
        if(surveyor.isValidClaim()){
            System.out.println("ClaimApprovalManager: Valid claim. Currently processing claim for approval....");
        }
    }
}


Both the HealthInsuranceSurveyor and ClaimApprovalManager classes work fine and the design for the insurance
system appears perfect until a new requirement to process vehicle insurance claims arises.
We now need to include a new VehicleInsuranceSurveyor class, and this should not create any problems. But,
what we also need is to modify the ClaimApprovalManager class to process vehicle insurance claims.
This is how the modified ClaimApprovalManager will be:

Modified ClaimApprovalManager.java
package guru.springframework.blog.openclosedprinciple;
public class ClaimApprovalManager {
    public void processHealthClaim (HealthInsuranceSurveyor surveyor)    {
        if(surveyor.isValidClaim()){
            System.out.println("ClaimApprovalManager: Valid claim. Currently processing claim for approval....");
        }
    }
    public void processVehicleClaim (VehicleInsuranceSurveyor surveyor)    {
        if(surveyor.isValidClaim()){
            System.out.println("ClaimApprovalManager: Valid claim. Currently processing claim for approval....");
        }
    }
}

In the example above, we modified the ClaimApprovalManager class by adding a new processVehicleClaim( ) method to incorporate a new functionality (claim approval of vehicle insurance).

As apparent, this is a clear violation of the Open Closed Principle.
We need to modify the class to add support for a new functionality. In fact,
we violated the Open Closed Principle at the very first instance we wrote the ClaimApprovalManager class.
This may appear innocuous in the current example, but consider the consequences in an
enterprise application that needs to keep pace with fast changing business demands. For each change, you need to modify,
test, and deploy the entire application.
That not only makes the application fragile and expensive to extend but also makes it prone to software bugs.


Coding to the Open Closed Principle
The ideal approach for the insurance claim example would have been to design the ClaimApprovalManager class in a way that it remains:

Open to support more types of insurance claims.

Closed for any modifications whenever support for a new type of claim is added.

To achieve this, let’s introduce a layer of abstraction by creating an abstract class to represent different claim validation behaviors. We will name the class InsuranceSurveyor.